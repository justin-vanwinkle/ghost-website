{"version":3,"sources":["ghosthunter.js","jquery.fitvids.js","gallery-card.js","infinite-scroll.js","search.js","sticky-nav-title.js"],"names":["$","root","factory","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","version","utils","warn","this","message","console","asString","obj","toString","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","slice","prototype","undefined","idf","posting","documentCount","documentsWithTerm","Object","keys","length","x","Math","log","abs","Token","str","metadata","update","fn","clone","tokenizer","Array","isArray","map","t","toLowerCase","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","push","position","index","Pipeline","_stack","registeredFunctions","create","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","fns","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","i","reduce","memo","token","j","result","concat","runString","reset","toJSON","Vector","elements","_magnitude","positionForIndex","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","val","upsert","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","a","b","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","c","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","noEditNode","char","deletionNode","frame","pop","substitutionNode","insertionNode","transposeNode","charA","charB","wildcardFound","next","prefix","edge","_str","labels","sort","intersect","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","clauses","terms","usePipeline","m","JSON","stringify","termTokenSet","expandedTerms","expandedTerm","termIndex","_index","k","field","fieldPosting","matchingDocumentRefs","termField","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","matchingFieldRefs","results","matches","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","number","k1","doc","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","key","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","options","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseFieldOrTerm","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parseField","parseTerm","errorMessage","possibleFields","f","nextLexeme","parseEditDistance","parseBoost","parseInt","isNaN","define","amd","exports","module","array","getChar","idx","getArrayMember","Levenshtein","str_m","str_n","previous","current","matrix","getElem","_matrix","distance","n_val","n_idx","m_val","m_idx","min","inspect","no_print","max","buff","sep","getMatrix","o","row","cell","getSteps","steps","y","u","d","Number","MAX_VALUE","valueOf","ghostHunter","opts","extend","defaults","pluginMethods","init","resultsData","onPageLoad","onKeyUp","result_template","info_template","displaySearchInfo","zeroResultsInfo","onComplete","filterfields","subpath","item_preprocessor","indexing_start","indexing_end","includebodysearch","getSubpathKey","lastTimeoutID","settleIDs","each","newAttr","getAttribute","setAttribute","updateSearchList","listItems","apiData","ilen","step","eq","lunrref","postData","blogData","html","format","replaceWith","grabAndIndex","latestPost","url","ghost_root_url","ghosthunter_key","params","limit","include","formats","me","get","done","data","idxSrc","posts","arrayItem","Date","updated_at","getTime","tag_arr","tags","meta_description","category","parsedData","title","description","custom_excerpt","pubDate","published_at","tag","plaintext","date","localUrl","getDate","getMonth","getFullYear","link","assign","subpathKey","localStorage","setItem","e","isInit","target","that","window","setTimeout","loadAPI","focus","closest","submit","preventDefault","find","keydown","event","which","keyup","getItem","ghost_root","value","clearTimeout","thingsFound","valueSplit","split","searchResult","jlen","otherRefs","klen","empty","append","amount","children","currentRefs","newRefs","bind","clear","r","jQuery","fitVids","settings","customSelector","document","getElementById","head","getElementsByTagName","div","createElement","innerHTML","appendChild","childNodes","selectors","ignoreList","$allVideos","not","$this","parents","tagName","css","attr","aspectRatio","height","videoName","_count","wrap","removeAttr","Zepto","addEventListener","querySelectorAll","image","container","ratio","attributes","style","flex","nextElement","querySelector","feedElement","ticking","loading","lastScrollY","scrollY","lastWindowHeight","innerHeight","lastDocumentHeight","documentElement","scrollHeight","onScroll","passive","onResize","requestTick","status","removeEventListener","response","item","importNode","resNextElement","href","onUpdate","xhr","XMLHttpRequest","responseType","open","send","requestAnimationFrame","resultTemplate","itemPreprocessor","ret","excerpt","feature_image","indexingStart","prop","addClass","indexingEnd","removeClass","ready","click","fadeOut","fadeIn","Casper","stickyNavTitle","nav","navSelector","titleSelector","trigger","getBoundingClientRect","top","triggerOffset","offsetHeight","classList","activeClass"],"mappings":"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,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA,QACA,QACA,QACA,MACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,SAGAhL,EAAAsE,SAAAI,iBAAA1E,EAAAO,eAAA;;;;IAqBAP,EAAAM,QAAA,SAAA0F,GACA,OAAAA,EAAA/C,QAAA,SAAArB,GACA,OAAAA,EAAAiJ,QAAA,OAAA,IAAAA,QAAA,OAAA,QAIA7K,EAAAsE,SAAAI,iBAAA1E,EAAAM,QAAA;;;;IA2BAN,EAAAoL,SAAA,WACArK,KAAAsK,OAAA,EACAtK,KAAAuK,MAAA,GACAvK,KAAAwK,GAAAvL,EAAAoL,SAAAI,QACAxL,EAAAoL,SAAAI,SAAA,GAWAxL,EAAAoL,SAAAI,QAAA,EASAxL,EAAAoL,SAAAK,UAAA,SAAAC,GAGA,IAFA,IAAAxL,EAAA,IAAAF,EAAAoL,SAAAjL,QAEA0F,EAAA,EAAAlC,EAAA+H,EAAAjJ,OAAAoD,EAAAlC,EAAAkC,IACA3F,EAAA8G,OAAA0E,EAAA7F,IAIA,OADA3F,EAAAyL,SACAzL,EAAA9B,MAYA4B,EAAAoL,SAAAQ,WAAA,SAAAC,GACA,MAAA,iBAAAA,EACA7L,EAAAoL,SAAAU,gBAAAD,EAAAE,KAAAF,EAAAG,cAEAhM,EAAAoL,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","file":"casper.js","sourcesContent":["/**\n* ghostHunter - 0.6.0\n * Copyright (C) 2014 Jamal Neufeld (jamal@i11u.me)\n * MIT Licensed\n * @license\n*/\n(function( $ ) {\n\n\t/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.1.5\n * Copyright (C) 2017 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.1.5\"\n/*!\n * lunr.utils\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf Utils\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf Utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @returns {lunr.Token[]}\n */\nlunr.tokenizer = function (obj) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(lunr.utils.asString(t).toLowerCase())\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        tokens.push(\n          new lunr.Token (str.slice(sliceStart, sliceEnd), {\n            position: [sliceStart, sliceLength],\n            index: tokens.length\n          })\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n\n    tokens = tokens.reduce(function (memo, token, j) {\n      var result = fn(token, j, tokens)\n\n      if (result === void 0 || result === '') return memo\n\n      return memo.concat(result)\n    }, [])\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str) {\n  var token = new lunr.Token (str)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the cosine similarity between this vector and another\n * vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude())\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2017 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      } else {\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node,\n      wildcardFound = false\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * As soon as a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      wildcardFound = true\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n\n      // TODO: is this needed anymore?\n      if (wildcardFound) {\n        node.edges[\"*\"] = root\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null)\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term)\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n\n      clause = JSON.parse(JSON.stringify(clause))\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n          var expandedTerm = expandedTerms[j];\n          var posting = this.invertedIndex[expandedTerm];\n          if (posting) {\n              var termIndex = posting._index;\n          } else {\n              continue;\n          }\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field\n\n          /*\n           * To support field level boosts a query vector is created per\n           * field. This vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           *\n           * If the query vector for this field does not exist yet it needs\n           * to be created.\n           */\n          if (queryVectors[field] === undefined) {\n            queryVectors[field] = new lunr.Vector\n          }\n\n          /*\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, 1 * clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef,\n        fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = {},\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = []\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * @param {string} field - The name of a field to index in all documents.\n */\nlunr.Builder.prototype.field = function (field) {\n  this._fields.push(field)\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * @param {object} doc - The document to add to the index.\n */\nlunr.Builder.prototype.add = function (doc) {\n  var docRef = doc[this._ref]\n\n  this.documentCount += 1\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var fieldName = this._fields[i],\n        field = doc[fieldName],\n        tokens = this.tokenizer(field),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < this._fields.length; k++) {\n          posting[this._fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var field = this._fields[i]\n    accumulator[field] = accumulator[field] / documentsWithField[field]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[field])) + tf)\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: this._fields,\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata)\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n  this.metadata[term] = Object.create(null)\n  this.metadata[term][field] = clonedMetadata\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=0] - Whether the term should have wildcards appended or prepended.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * @param {string} term - The term to add to the query.\n * @param {Object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.prototype.term = function (term, options) {\n  var clause = options || {}\n  clause.term = term\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseFieldOrTerm\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseFieldOrTerm = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n\n\n\t// Adapted from https://github.com/pseudonym117/Levenshtein\n(function(root, factory){\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n        define(function(){\n            return factory(root);\n        });\n    } else if (typeof module == 'object' && module && module.exports) {\n        module.exports = factory(root);\n    } else {\n        root.Levenshtein = factory(root);\n    }\n}(this, function(root){\n\n    function forEach( array, fn ) { var i, length\n        i = -1\n        length = array.length\n        while ( ++i < length )\n            fn( array[ i ], i, array )\n    }\n\n    function map( array, fn ) { var result\n        result = Array( array.length )\n        forEach( array, function ( val, i, array ) {\n            result.push( fn( val, i, array ) )\n        })\n        return result\n    }\n\n    function reduce( array, fn, accumulator ) {\n        forEach( array, function( val, i, array ) {\n            accumulator = fn( val, i, array )\n        })\n        return accumulator\n    }\n\n    // For string mode\n    function getChar(str, idx) {\n        return str.charAt(idx);\n    }\n\n    // For array mode\n    function getArrayMember(arr, idx) {\n        return arr[idx];\n    }\n\n    // Levenshtein distance\n    function Levenshtein( str_m, str_n ) {\n        var previous, current, matrix, getElem\n        // Set to string or array mode\n        if (typeof str_m === \"string\" && typeof str_n === \"string\") {\n            getElem = getChar;\n        } else if (typeof str_m === \"object\" && typeof str_n === \"object\") {\n            getElem = getArrayMember;\n        } else {\n            throw \"Levensthtein: input must be two strings or two arrays\"\n        }\n        // Constructor\n        matrix = this._matrix = []\n\n        // Sanity checks\n        if ( str_m == str_n )\n            return this.distance = 0\n        else if ( str_m == '' )\n            return this.distance = str_n.length\n        else if ( str_n == '' )\n            return this.distance = str_m.length\n        else {\n            // Danger Will Robinson\n            previous = [ 0 ]\n            forEach( str_m, function( v, i ) { i++, previous[ i ] = i } )\n\n            matrix[0] = previous\n            forEach( str_n, function( n_val, n_idx ) {\n                current = [ ++n_idx ]\n                forEach( str_m, function( m_val, m_idx ) {\n                    m_idx++\n                    if ( getElem(str_m, m_idx - 1) == getElem(str_n, n_idx - 1) )\n                        current[ m_idx ] = previous[ m_idx - 1 ]\n                    else\n                        current[ m_idx ] = Math.min\n                            ( previous[ m_idx ] + 1        // Deletion\n                            , current[ m_idx - 1 ] + 1     // Insertion\n                            , previous[ m_idx - 1 ] + 1    // Subtraction\n                            )\n                })\n                previous = current\n                matrix[ matrix.length ] = previous\n            })\n\n            return this.distance = current[ current.length - 1 ]\n        }\n    }\n\n    Levenshtein.prototype.toString = Levenshtein.prototype.inspect = function inspect ( no_print ) { var matrix, max, buff, sep, rows\n        matrix = this.getMatrix()\n        max = reduce( matrix,function( m, o ) {\n            return Math.max( m, reduce( o, Math.max, 0 ) )\n        }, 0 )\n        buff = Array( ( max + '' ).length ).join( ' ' )\n\n        sep = []\n        while ( sep.length < (matrix[0] && matrix[0].length || 0) )\n            sep[ sep.length ] = Array( buff.length + 1 ).join( '-' )\n        sep = sep.join( '-+' ) + '-'\n\n        rows = map( matrix, function( row ) { var cells\n            cells = map( row, function( cell ) {\n                return ( buff + cell ).slice( - buff.length )\n            })\n            return cells.join( ' |' ) + ' '\n        })\n\n        return rows.join( \"\\n\" + sep + \"\\n\" )\n    }\n\n    // steps to get from string 1 to string 2\n    Levenshtein.prototype.getSteps = function()     {\n        var steps, matrix, x, y, u, l, d, min\n        steps = []\n        matrix = this.getMatrix()\n        x = matrix.length - 1\n        y = matrix[0].length - 1\n        while(x !== 0 || y !== 0)     {\n            u = y > 0 ? matrix[x][y-1] : Number.MAX_VALUE\n            l = x > 0 ? matrix[x-1][y] : Number.MAX_VALUE\n            d = y > 0 && x > 0 ? matrix[x-1][y-1] : Number.MAX_VALUE\n            min = Math.min(u, l, d)\n            if(min === d) {\n                if(d < matrix[x][y]) {\n                    steps.push(['substitute', y, x])\n                }//  else steps.push(['no-op', y, x])\n                x--\n                y--\n            } else if(min === l) {\n                steps.push(['insert', y, x])\n                x--\n            } else {\n                steps.push(['delete', y, x])\n                y--\n            }\n        }\n        return steps\n    }\n\n    Levenshtein.prototype.getMatrix = function () {\n        return this._matrix.slice()\n    }\n\n    Levenshtein.prototype.valueOf = function() {\n        return this.distance\n    }\n\n    return Levenshtein\n\n}));\n\n\n\t//This is the main plugin definition\n\t$.fn.ghostHunter \t= function( options ) {\n\n\t\t//Here we use jQuery's extend to set default values if they weren't set by the user\n\t\tvar opts \t\t= $.extend( {}, $.fn.ghostHunter.defaults, options );\n\t\tif( opts.results )\n\t\t{\n\t\t\tpluginMethods.init( this , opts );\n\t\t\treturn pluginMethods;\n\t\t}\n\t};\n\t// If the Ghost instance is in a subpath of the site, set subpath\n\t// as the path to the site with a leading slash and no trailing slash\n\t// (i.e. \"/path/to/instance\").\n\t$.fn.ghostHunter.defaults = {\n\t\tresultsData\t\t\t: false,\n\t\tonPageLoad\t\t\t: false,\n\t\tonKeyUp\t\t\t\t: false,\n\t\tresult_template \t: \"<a id='gh-{{ref}}' class='gh-search-item' href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>\",\n\t\tinfo_template\t\t: \"<p>Number of posts found: {{amount}}</p>\",\n\t\tdisplaySearchInfo\t: true,\n\t\tzeroResultsInfo\t\t: true,\n\t\tbefore\t\t\t\t: false,\n\t\tonComplete\t\t\t: false,\n\t\tfilterfields\t\t: false,\n\t\tsubpath\t\t\t\t: \"\",\n\t\titem_preprocessor\t: false,\n\t\tindexing_start\t\t: false,\n\t\tindexing_end\t\t: false,\n\t\tincludebodysearch\t: false\n\t};\n\tvar prettyDate = function(date) {\n\t\tvar d = new Date(date);\n\t\tvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t\t\treturn d.getDate() + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();\n\t};\n\n\tvar getSubpathKey = function(str) {\n\t\treturn str.replace(/^\\//, \"\").replace(/\\//g, \"-\")\n\t};\n\n\tvar lastTimeoutID = null;\n\n\t// We add a prefix to new IDs and remove it after a set of\n\t// updates is complete, just in case a browser freaks over\n\t// duplicate IDs in the DOM.\n\tvar settleIDs = function() {\n\t\t$('.gh-search-item').each(function(){\n\t\t\tvar oldAttr = this.getAttribute('id');\n\t\t\tvar newAttr = oldAttr.replace(/^new-/, \"\");\n\t\t\tthis.setAttribute('id', newAttr);\n\t\t});\n\t};\n\tvar updateSearchList = function(listItems, apiData, steps) {\n\t\tfor (var i=0,ilen=steps.length;i<ilen;i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (step[0] == \"delete\") {\n\t\t\t\tlistItems.eq(step[1]-1).remove();\n\t\t\t} else {\n\t\t\t\tvar lunrref = apiData[step[2]-1].ref;\n\t\t\t\tvar postData = this.blogData[lunrref];\n\t\t\t\tvar html = this.format(this.result_template,postData);\n\t\t\t\tif (step[0] === \"substitute\") {\n\t\t\t\t\tlistItems.eq(step[1]-1).replaceWith(html);\n\t\t\t\t} else if (step[0] === \"insert\") {\n\t\t\t\t\tvar pos;\n\t\t\t\t\tif (step[1] === 0) {\n\t\t\t\t\t\tpos = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpos = (step[1]-1)\n\t\t\t\t\t}\n\t\t\t\t\tlistItems.eq(pos).after(html);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsettleIDs();\n\t}\n\n\tvar grabAndIndex = function(){\n\t\t// console.log('ghostHunter: grabAndIndex');\n\t\tthis.blogData = {};\n\t\tthis.latestPost = 0;\n\t\tvar ghost_root = ghost_root_url || \"/ghost/api/v2\";\n            \tvar url = ghost_root + \"/content/posts/?key=\" + ghosthunter_key + \"&limit=all&include=tags\";\n\n\t\tvar params = {\n\t\t\tlimit: \"all\",\n\t\t\tinclude: \"tags\",\n\t\t};\n\t\tif ( this.includebodysearch ){\n\t\t\tparams.formats=[\"plaintext\"]\n      url += \"&formats=plaintext\"\n\t\t} else {\n\t\t\tparams.formats=[\"\"]\n\t\t}\n\t\tvar me = this;\n    $.get(url).done(function(data){\n\t\t\tvar idxSrc = data.posts;\n\t\t\t// console.log(\"ghostHunter: indexing all posts\")\n\t\t\tme.index = lunr(function () {\n\t\t\t\tthis.ref('id');\n\t\t\t\tthis.field('title');\n\t\t\t\tthis.field('description');\n\t\t\t\tif (me.includebodysearch){\n\t\t\t\tthis.field('plaintext');\n\t\t\t\t}\n\t\t\t\tthis.field('pubDate');\n\t\t\t\tthis.field('tag');\n\t\t\t\tidxSrc.forEach(function (arrayItem) {\n\t\t\t\t\t// console.log(\"start indexing an item: \" + arrayItem.id);\n\t\t\t\t\t// Track the latest value of updated_at,  to stash in localStorage\n\t\t\t\t\tvar itemDate = new Date(arrayItem.updated_at).getTime();\n\t\t\t\t\tvar recordedDate = new Date(me.latestPost).getTime();\n\t\t\t\t\tif (itemDate > recordedDate) {\n\t\t\t\t\t\tme.latestPost = arrayItem.updated_at;\n\t\t\t\t\t}\n\t\t\t\t\tvar tag_arr = arrayItem.tags.map(function(v) {\n\t\t\t\t\t\treturn v.name; // `tag` object has an `name` property which is the value of tag. If you also want other info, check API and get that property\n\t\t\t\t\t})\n\t\t\t\t\tif(arrayItem.meta_description == null) { arrayItem.meta_description = '' };\n\t\t\t\t\tvar category = tag_arr.join(\", \");\n\t\t\t\t\tif (category.length < 1){\n\t\t\t\t\t\tcategory = \"undefined\";\n\t\t\t\t\t}\n\t\t\t\t\tvar parsedData \t= {\n\t\t\t\t\t\tid \t\t\t: String(arrayItem.id),\n\t\t\t\t\t\ttitle \t\t: String(arrayItem.title),\n\t\t\t\t\t\tdescription\t: String(arrayItem.custom_excerpt),\n\t\t\t\t\t\tpubDate \t: String(arrayItem.published_at),\n\t\t\t\t\t\ttag \t\t: category\n\t\t\t\t\t}\n\t\t\t\t\tif  ( me.includebodysearch ){\n\t\t\t\t\t\tparsedData.plaintext=String(arrayItem.plaintext);\n\t\t\t\t\t}\n\t\t\t\t\tthis.add(parsedData)\n\t\t\t\t\tvar localUrl = me.subpath + arrayItem.url\n\t\t\t\t\tme.blogData[arrayItem.id] = {\n\t\t\t\t\t\ttitle: arrayItem.title,\n\t\t\t\t\t\tdescription: arrayItem.custom_excerpt,\n\t\t\t\t\t\tpubDate: prettyDate(parsedData.pubDate),\n\t\t\t\t\t\tlink: localUrl,\n\t\t\t\t\t\ttags: tag_arr\n\t\t\t\t\t};\n\t\t\t\t\t// If there is a metadata \"pre\"-processor for the item, run it here.\n\t\t\t\t\tif (me.item_preprocessor) {\n\t\t\t\t\t\tObject.assign(me.blogData[arrayItem.id], me.item_preprocessor(arrayItem));\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(\"done indexing the item\");\n\t\t\t\t}, this);\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tvar subpathKey = getSubpathKey(me.subpath);\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_lunrIndex\"), JSON.stringify(me.index));\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_blogData\"), JSON.stringify(me.blogData));\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_latestPost\"), me.latestPost);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"ghostHunter: save to localStorage failed: \" + e);\n\t\t\t}\n\t\t\tif (me.indexing_end) {\n\t\t\t\tme.indexing_end();\n\t\t\t}\n\t\t\tme.isInit = true;\n\t\t});\n\t}\n\n\tvar pluginMethods\t= {\n\n\t\tisInit\t\t\t: false,\n\n\t\tinit\t\t\t: function( target , opts ){\n\t\t\tvar that = this;\n\t\t\tthat.target = target;\n\t\t\tObject.assign(this, opts);\n\t\t\t// console.log(\"ghostHunter: init\");\n\t\t\tif ( opts.onPageLoad ) {\n\t\t\t\tfunction miam () {\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t}\n\t\t\t\twindow.setTimeout(miam, 1);\n\t\t\t} else {\n\t\t\t\ttarget.focus(function(){\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttarget.closest(\"form\").submit(function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\tthat.find(target.val());\n\t\t\t});\n\n\t\t\tif( opts.onKeyUp ) {\n\t\t\t\t// In search-as-you-type mode, the Enter key is meaningless,\n\t\t\t\t// so we disable it in the search field. If enabled, some browsers\n\t\t\t\t// will save data to history (even when autocomplete=\"false\"), which\n\t\t\t\t// is an intrusive headache, particularly on mobile.\n\t\t\t\ttarget.keydown(function(event){\n\t\t\t\t\tif (event.which === 13) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttarget.keyup(function(event) {\n\t\t\t\t\tthat.find(target.val());\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t},\n\n\t\tloadAPI\t\t\t: function(){\n\t\t\t// console.log('ghostHunter: loadAPI');\n\t\t\tif(!this.isInit) {\n\t\t\t\t// console.log('ghostHunter: this.isInit is true');\n\t\t\t\tif (this.indexing_start) {\n\t\t\t\t\tthis.indexing_start();\n\t\t\t\t}\n\t\t\t\t// If isInit is falsy, check for data in localStore,\n\t\t\t\t// parse into memory, and declare isInit to be true.\n\t\t\t\ttry {\n\t\t\t\t\tvar subpathKey = getSubpathKey(this.subpath);\n\t\t\t\t\tthis.index = localStorage.getItem((\"ghost_\" + subpathKey + \"_lunrIndex\"));\n\t\t\t\t\tthis.blogData = localStorage.getItem((\"ghost_\" + subpathKey + \"_blogData\"));\n\t\t\t\t\tthis.latestPost = localStorage.getItem((\"ghost_\" + subpathKey + \"_latestPost\"));\n\t\t\t\t\tif (this.latestPost && this.index && this.blogData) {\n\t\t\t\t\t\tthis.latestPost = this.latestPost;\n\t\t\t\t\t\tthis.index = lunr.Index.load(JSON.parse(this.index));\n\t\t\t\t\t\tthis.blogData = JSON.parse(this.blogData);\n\t\t\t\t\t\tthis.isInit = true;\n\t\t\t\t\t}\n\t\t\t\t} catch (e){\n\t\t\t\t\tconsole.warn(\"ghostHunter: retrieve from localStorage failed: \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.isInit) {\n\t\t\t\t// console.log('ghostHunter: this.isInit recheck is true');\n\t\t\t\t// Check if there are new or edited posts\n\t\t\t\tvar params = {\n\t\t\t\t\tlimit: \"all\",\n\t\t\t\t\tfilter: \"updated_at:>\\'\" + this.latestPost.replace(/\\..*/, \"\").replace(/T/, \" \") + \"\\'\",\n\t\t\t\t\tfields: \"id\"\n\t\t\t\t};\n\tvar ghost_root = ghost_root_url || \"/ghost/api/v2\";\n        var url = ghost_root + \"/content/posts/?key=\" + ghosthunter_key + \"&limit=all&fields=id\" + \"&filter=\" + \"updated_at:>\\'\" + this.latestPost.replace(/\\..*/, \"\").replace(/T/, \" \") + \"\\'\";\n\n\t\t\t\tvar me = this;\n        $.get(url).done(function(data){\n\t\t\t\t\tif (data.posts.length > 0) {\n\t\t\t\t\t\tgrabAndIndex.call(me);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (me.indexing_end) {\n\t\t\t\t\t\t\tme.indexing_end();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tme.isInit = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// console.log('ghostHunter: this.isInit recheck is false');\n\t\t\t\tgrabAndIndex.call(this)\n\t\t\t}\n\t\t},\n\n\n\t\tfind \t\t \t: function(value){\n\t\t\tclearTimeout(lastTimeoutID);\n\t\t\tif (!value) {\n\t\t\t\tvalue = \"\";\n\t\t\t};\n\t\t\tvalue = value.toLowerCase();\n\t\t\tlastTimeoutID = setTimeout(function() {\n\t\t\t\t// Query strategy is lifted from comments on a lunr.js issue: https://github.com/olivernn/lunr.js/issues/256\n\t\t\t\tvar thingsFound = [];\n\t\t\t\t// The query interface expects single terms, so we split.\n\t\t\t\tvar valueSplit = value.split(/\\s+/);\n\t\t\t\tfor (var i=0,ilen=valueSplit.length;i<ilen;i++) {\n\t\t\t\t\t// Fetch a list of matches for each term.\n\t\t\t\t\tvar v = valueSplit[i];\n\t\t\t\t\tif (!v) continue;\n\t\t\t\t\tthingsFound.push(this.index.query(function (q) {\n\t\t\t\t\t\t// For an explanation of lunr indexing options, see the lunr.js\n\t\t\t\t\t\t// documentation at https://lunrjs.com/docs/lunr.Query.html#~Clause\n\n\t\t\t\t\t\t// look for an exact match and apply a large positive boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: true,\n\t\t\t\t\t\t\tboost: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// look for terms that match the beginning of this queryTerm and apply a medium boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: false,\n\t\t\t\t\t\t\tboost: 10,\n\t\t\t\t\t\t\twildcard: lunr.Query.wildcard.TRAILING\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// look for terms that match with an edit distance of 1 and apply a small boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: false,\n\t\t\t\t\t\t\teditDistance: 1,\n\t\t\t\t\t\t\tboost: 1\n\t\t\t\t\t\t});\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tvar searchResult;\n\t\t\t\tif (thingsFound.length > 1) {\n\t\t\t\t\t// If we had multiple terms, we'll have multiple lists. We filter\n\t\t\t\t\t// them here to use only items that produce returns for all\n\t\t\t\t\t// terms. This spoofs an AND join between terms, which lunr.js can't\n\t\t\t\t\t// yet do internally.\n\t\t\t\t\t// By using the first list of items as master, we get weightings\n\t\t\t\t\t// based on the first term entered, which is more or less\n\t\t\t\t\t// what we would expect.\n\t\t\t\t\tvar searchResult = thingsFound[0];\n\t\t\t\t\tthingsFound = thingsFound.slice(1);\n\t\t\t\t\tfor (var i=searchResult.length-1;i>-1;i--) {\n\t\t\t\t\t\tvar ref = searchResult[i].ref;\n\t\t\t\t\t\tfor (j=0,jlen=thingsFound.length;j<jlen;j++) {\n\t\t\t\t\t\t\tvar otherRefs = {}\n\t\t\t\t\t\t\tfor (var k=0,klen=thingsFound[j].length;k<klen;k++) {\n\t\t\t\t\t\t\t\totherRefs[thingsFound[j][k].ref] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!otherRefs[ref]) {\n\t\t\t\t\t\t\t\tsearchResult = searchResult.slice(0, i).concat(searchResult.slice(i+1));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (thingsFound.length === 1) {\n\t\t\t\t\t// If we had just one term and one list, return that.\n\t\t\t\t\tsearchResult = thingsFound[0];\n\t\t\t\t} else {\n\t\t\t\t\t// If there was no search result, return an empty list.\n\t\t\t\t\tsearchResult = [];\n\t\t\t\t}\n\n\t\t\t\tvar results \t\t= $(this.results);\n\t\t\t\tvar resultsData \t= [];\n\t\t\t\tif (searchResult.length === 0) {\n\t\t\t\t\tresults.empty();\n\t\t\t\t\tif (this.displaySearchInfo && this.zeroResultsInfo) {\n\t\t\t\t\t\tresults.append(this.format(this.info_template,{\"amount\":0}));\n\t\t\t\t\t}\n\t\t\t\t} else if (this.displaySearchInfo) {\n\t\t\t\t\tif (results.length > 0) {\n\t\t\t\t\t\tresults.children().eq(0).replaceWith(this.format(this.info_template,{\"amount\":searchResult.length}));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.append(this.format(this.info_template,{\"amount\":searchResult.length}));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(this.before) {\n\t\t\t\t\tthis.before();\n\t\t\t\t};\n\n\t\t\t\t// Get the blogData for the full set, for onComplete\n\t\t\t\tfor (var i = 0; i < searchResult.length; i++) {\n\t\t\t\t\tvar lunrref\t\t= searchResult[i].ref;\n\t\t\t\t\tvar postData  \t= this.blogData[lunrref];\n\t\t\t\t\tif (postData) {\n\t\t\t\t\t\tpostData.ref = lunrref;\n\t\t\t\t\t\tresultsData.push(postData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"ghostHunter: index/data mismatch. Ouch.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Get an array of IDs present in current results\n\t\t\t\tvar listItems = $('.gh-search-item');\n\t\t\t\tvar currentRefs = listItems\n\t\t\t\t\t.map(function(){\n\t\t\t\t\t\treturn this.id.slice(3);\n\t\t\t\t\t}).get();\n\t\t\t\tif (currentRefs.length === 0) {\n\t\t\t\t\tfor (var i=0,ilen=resultsData.length;i<ilen;i++) {\n\t\t\t\t\t\tresults.append(this.format(this.result_template,resultsData[i]));\n\t\t\t\t\t}\n\t\t\t\t\tsettleIDs();\n\t\t\t\t} else {\n\t\t\t\t\t// Get an array of IDs present in searchResult\n\t\t\t\t\tvar newRefs = [];\n\t\t\t\t\tfor (var i=0,ilen=searchResult.length;i<ilen;i++) {\n\t\t\t\t\t\tnewRefs.push(searchResult[i].ref)\n\t\t\t\t\t}\n\t\t\t\t\t// Get the Levenshtein steps needed to transform current into searchResult\n\t\t\t\t\tvar levenshtein = new Levenshtein(currentRefs, newRefs);\n\t\t\t\t\tvar steps = levenshtein.getSteps();\n\t\t\t\t\t// Apply the operations\n\t\t\t\t\tupdateSearchList.call(this, listItems, searchResult, steps);\n\t\t\t\t}\n\t\t\t\t// Tidy up\n\t\t\t\tif(this.onComplete) {\n\t\t\t\t\tthis.onComplete(resultsData);\n\t\t\t\t};\n\t\t\t}.bind(this), 100);\n\t\t},\n\n\t\tclear \t\t\t: function(){\n\t\t\t$(this.results).empty();\n\t\t\tthis.target.val(\"\");\n\t\t},\n\n\t\tformat \t\t\t: function (t, d) {\n\t\t\treturn t.replace(/{{([^{}]*)}}/g, function (a, b) {\n\t\t\t\tvar r = d[b];\n\t\t\t\treturn typeof r === 'string' || typeof r === 'number' ? r : a;\n\t\t\t});\n\t\t}\n\t}\n\n})( jQuery );\n","/*jshint browser:true */\n/*!\n* FitVids 1.3\n*\n*\n* Copyright 2017, Chris Coyier + Dave Rupert + Ghost Foundation\n* This is an unofficial release, ported by John O'Nolan\n* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/\n* Released under the MIT license\n*\n*/\n\n;(function( $ ){\n\n  'use strict';\n\n  $.fn.fitVids = function( options ) {\n    var settings = {\n      customSelector: null,\n      ignore: null\n    };\n\n    if(!document.getElementById('fit-vids-style')) {\n      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js\n      var head = document.head || document.getElementsByTagName('head')[0];\n      var css = '.fluid-width-video-container{flex-grow: 1;width:100%;}.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';\n      var div = document.createElement(\"div\");\n      div.innerHTML = '<p>x</p><style id=\"fit-vids-style\">' + css + '</style>';\n      head.appendChild(div.childNodes[1]);\n    }\n\n    if ( options ) {\n      $.extend( settings, options );\n    }\n\n    return this.each(function(){\n      var selectors = [\n        'iframe[src*=\"player.vimeo.com\"]',\n        'iframe[src*=\"youtube.com\"]',\n        'iframe[src*=\"youtube-nocookie.com\"]',\n        'iframe[src*=\"kickstarter.com\"][src*=\"video.html\"]',\n        'object',\n        'embed'\n      ];\n\n      if (settings.customSelector) {\n        selectors.push(settings.customSelector);\n      }\n\n      var ignoreList = '.fitvidsignore';\n\n      if(settings.ignore) {\n        ignoreList = ignoreList + ', ' + settings.ignore;\n      }\n\n      var $allVideos = $(this).find(selectors.join(','));\n      $allVideos = $allVideos.not('object object'); // SwfObj conflict patch\n      $allVideos = $allVideos.not(ignoreList); // Disable FitVids on this video.\n\n      $allVideos.each(function(){\n        var $this = $(this);\n        if($this.parents(ignoreList).length > 0) {\n          return; // Disable FitVids on this video.\n        }\n        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }\n        if ((!$this.css('height') && !$this.css('width')) && (isNaN($this.attr('height')) || isNaN($this.attr('width'))))\n        {\n          $this.attr('height', 9);\n          $this.attr('width', 16);\n        }\n        var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') && !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),\n            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),\n            aspectRatio = height / width;\n        if(!$this.attr('name')){\n          var videoName = 'fitvid' + $.fn.fitVids._count;\n          $this.attr('name', videoName);\n          $.fn.fitVids._count++;\n        }\n        $this.wrap('<div class=\"fluid-width-video-container\"><div class=\"fluid-width-video-wrapper\"></div></div>').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+'%');\n        $this.removeAttr('height').removeAttr('width');\n      });\n    });\n  };\n\n  // Internal counter for unique video names.\n  $.fn.fitVids._count = 0;\n\n// Works with either jQuery or Zepto\n})( window.jQuery || window.Zepto );\n","/* eslint-env browser */\n\n/**\n * Gallery card support\n * Used on any individual post/page\n *\n * Detects when a gallery card has been used and applies sizing to make sure\n * the display matches what is seen in the editor.\n */\n\n(function (window, document) {\n    var resizeImagesInGalleries = function resizeImagesInGalleries() {\n        var images = document.querySelectorAll('.kg-gallery-image img');\n        images.forEach(function (image) {\n            var container = image.closest('.kg-gallery-image');\n            var width = image.attributes.width.value;\n            var height = image.attributes.height.value;\n            var ratio = width / height;\n            container.style.flex = ratio + ' 1 0%';\n        });\n    };\n\n    document.addEventListener('DOMContentLoaded', resizeImagesInGalleries);\n})(window, document);\n","/* eslint-env browser */\n\n/**\n * Infinite Scroll\n * Used on all pages where there is a list of posts (homepage, tag index, etc).\n *\n * When the page is scrolled to 300px from the bottom, the next page of posts\n * is fetched by following the the <link rel=\"next\" href=\"...\"> that is output\n * by {{ghost_head}}.\n *\n * The individual post items are extracted from the fetched pages by looking for\n * a wrapper element with the class \"post-card\". Any found elements are appended\n * to the element with the class \"post-feed\" in the currently viewed page.\n */\n\n(function (window, document) {\n    // next link element\n    var nextElement = document.querySelector('link[rel=next]');\n    if (!nextElement) {\n        return;\n    }\n\n    // post feed element\n    var feedElement = document.querySelector('.post-feed');\n    if (!feedElement) {\n        return;\n    }\n\n    var buffer = 300;\n\n    var ticking = false;\n    var loading = false;\n\n    var lastScrollY = window.scrollY;\n    var lastWindowHeight = window.innerHeight;\n    var lastDocumentHeight = document.documentElement.scrollHeight;\n\n    function onPageLoad() {\n        if (this.status === 404) {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n            return;\n        }\n\n        // append contents\n        var postElements = this.response.querySelectorAll('.post-card');\n        postElements.forEach(function (item) {\n            // document.importNode is important, without it the item's owner\n            // document will be different which can break resizing of\n            // `object-fit: cover` images in Safari\n            feedElement.appendChild(document.importNode(item, true));\n        });\n\n        // set next link\n        var resNextElement = this.response.querySelector('link[rel=next]');\n        if (resNextElement) {\n            nextElement.href = resNextElement.href;\n        } else {\n            window.removeEventListener('scroll', onScroll);\n            window.removeEventListener('resize', onResize);\n        }\n\n        // sync status\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        ticking = false;\n        loading = false;\n    }\n\n    function onUpdate() {\n        // return if already loading\n        if (loading) {\n            return;\n        }\n\n        // return if not scroll to the bottom\n        if (lastScrollY + lastWindowHeight <= lastDocumentHeight - buffer) {\n            ticking = false;\n            return;\n        }\n\n        loading = true;\n\n        var xhr = new window.XMLHttpRequest();\n        xhr.responseType = 'document';\n\n        xhr.addEventListener('load', onPageLoad);\n\n        xhr.open('GET', nextElement.href);\n        xhr.send(null);\n    }\n\n    function requestTick() {\n        ticking || window.requestAnimationFrame(onUpdate);\n        ticking = true;\n    }\n\n    function onScroll() {\n        lastScrollY = window.scrollY;\n        requestTick();\n    }\n\n    function onResize() {\n        lastWindowHeight = window.innerHeight;\n        lastDocumentHeight = document.documentElement.scrollHeight;\n        requestTick();\n    }\n\n    window.addEventListener('scroll', onScroll, {passive: true});\n    window.addEventListener('resize', onResize);\n\n    requestTick();\n})(window, document);\n","var resultTemplate = `\n<article id='gh-{{ref}}' class=\"gh-search-item post-card\">\n    <a class=\"post-card-image-link\" href=\"{{link}}\">\n        <img class=\"post-card-image\"\n            sizes=\"(max-width: 1000px) 400px, 700px\"\n            height=\"200px\"\n            loading=\"lazy\"\n            src=\"{{feature_image}}\"\n            alt=\"{{title}}\"\n        />\n    </a>\n    <div class=\"post-card-content search-card-content bg-white\">\n        <a class=\"post-card-content-link\" href=\"{{link}}\">\n            <header class=\"post-card-header\">\n                <h2 class=\"post-card-title\">{{title}}</h2>\n            </header>\n            <section class=\"post-card-excerpt\">\n                    <p class=\"search-excerpt\">{{excerpt}}</p>\n            </section>\n        </a>\n    </div>\n</article>\n`;\n\nvar itemPreprocessor = function(item) {\n    var ret = {};\n    ret.excerpt = item.excerpt;\n    ret.feature_image = item.feature_image;\n    return ret;\n};\n\nvar indexingStart = function() {\n    $('.search-field')\n        .prop('disabled', true)\n        .addClass('yellow-bg')\n        .prop('placeholder', 'Indexing, please wait');\n};\n\nvar indexingEnd = function() {\n    $('.search-field')\n        .prop('placeholder', 'Search …')\n        .removeClass('yellow-bg')\n        .prop('disabled', false);\n};\n\n$(document).ready(function () {\n    var searchField = $(\".search-field\").ghostHunter({\n        results   : \"#search-results\",\n        onKeyUp: true,\n        onPageLoad: true,\n        includebodysearch: true,\n        info_template: \"\",\n        result_template: resultTemplate,\n        item_preprocessor: itemPreprocessor,\n        indexing_start: indexingStart,\n        indexing_end: indexingEnd\n    });\n\n    $('.close-btn').click(function() {\n        $('.search-overlay').fadeOut();\n    });\n\n    $('#search-btn').click(function() {\n        $('.search-overlay').fadeIn();\n        $('.search-field').focus();\n    });\n});","/* eslint-env browser */\n\n/**\n * Nav/Title replacement\n * Used on invividual post pages, displays the post title in place of the nav\n * bar when scrolling past the title\n *\n * Usage:\n * ```\n * Casper.stickyTitle({\n *     navSelector: '.site-nav-main',\n *     titleSelector: '.post-full-title',\n *     activeClass: 'nav-post-title-active'\n * });\n * ```\n */\n\n(function (window, document) {\n    // set up Casper as a global object\n    if (!window.Casper) {\n        window.Casper = {};\n    }\n\n    window.Casper.stickyNavTitle = function stickyNavTitle(options) {\n        var nav = document.querySelector(options.navSelector);\n        var title = document.querySelector(options.titleSelector);\n\n        var lastScrollY = window.scrollY;\n        var ticking = false;\n\n        function onScroll() {\n            lastScrollY = window.scrollY;\n            requestTick();\n        }\n\n        function requestTick() {\n            if (!ticking) {\n                requestAnimationFrame(update);\n            }\n            ticking = true;\n        }\n\n        function update() {\n            var trigger = title.getBoundingClientRect().top + window.scrollY;\n            var triggerOffset = title.offsetHeight + 35;\n\n            // show/hide post title\n            if (lastScrollY >= trigger + triggerOffset) {\n                nav.classList.add(options.activeClass);\n            } else {\n                nav.classList.remove(options.activeClass);\n            }\n\n            ticking = false;\n        }\n\n        window.addEventListener('scroll', onScroll, {passive: true});\n\n        update();\n    };\n})(window, document);\n"]}